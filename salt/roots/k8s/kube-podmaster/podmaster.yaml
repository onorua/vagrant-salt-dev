{% set etcd_nodes = salt["pillar.get"]("k8s:etcd_nodes", []) %}
apiVersion: v1
kind: Pod
metadata:
  name: scheduler-master
  namespace: kube-system
spec:
  hostNetwork: true
  containers:
{% if pillar.get("kube-scheduler_docker_tag", "").startswith("v1.1") %}
  - name: scheduler-elector
    image: gcr.io/google_containers/podmaster:1.1
    command:
    - /podmaster
    - --etcd-servers={% for node in etcd_nodes %}http://{{node.address}}:{{node.client_port}}{% if loop.index != etcd_nodes|length %},{%endif %}{% endfor%}
    - --key=scheduler
    - --source-file=/kubernetes/kube-scheduler.manifest
    - --dest-file=/manifests/kube-scheduler.manifest
    volumeMounts:
    - mountPath: /kubernetes
      name: k8s
      readOnly: true
    - mountPath: /manifests
      name: manifests
{% endif %}
{% if pillar.get("kube-controller-manager_docker_tag", "").startswith("v1.1") %}
  - name: controller-manager-elector
    image: gcr.io/google_containers/podmaster:1.1
    command:
    - /podmaster
    - --etcd-servers={% for node in etcd_nodes %}http://{{node.address}}:{{node.client_port}}{% if loop.index != etcd_nodes|length %},{%endif %}{% endfor%}
    - --key=controller
    - --source-file=/kubernetes/kube-controller-manager.manifest
    - --dest-file=/manifests/kube-controller-manager.manifest
    terminationMessagePath: /dev/termination-log
    volumeMounts:
    - mountPath: /kubernetes
      name: k8s
      readOnly: true
    - mountPath: /manifests
      name: manifests
{% endif %}
  volumes:
  - hostPath:
      path: /srv/kubernetes
    name: k8s
  - hostPath:
      path: /etc/kubernetes/manifests
    name: manifests
